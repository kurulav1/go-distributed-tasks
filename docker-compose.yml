version: "3.9"
services:
  nats:
    image: nats:2.10
    command: ["-js","-m","8222","-DV"]
    restart: unless-stopped
    ports:
      - "4222:4222"
      - "8222:8222"

  roach1:
    image: cockroachdb/cockroach:v24.1.3
    hostname: roach1
    restart: unless-stopped
    command:
      [
        "start",
        "--insecure",
        "--cluster-name=distrib",
        "--listen-addr=0.0.0.0:${COCKROACH_RPC_PORT}",
        "--sql-addr=0.0.0.0:${COCKROACH_SQL_PORT}",
        "--advertise-addr=roach1:${COCKROACH_RPC_PORT}",
        "--advertise-sql-addr=roach1:${COCKROACH_SQL_PORT}",
        "--http-addr=0.0.0.0:8080",
        "--join=roach1:${COCKROACH_RPC_PORT},roach2:${COCKROACH_RPC_PORT},roach3:${COCKROACH_RPC_PORT}"
      ]
    volumes:
      - roach1:/cockroach/cockroach-data
    ports:
      - "${COCKROACH_SQL_PORT}:${COCKROACH_SQL_PORT}"
      - "${COCKROACH_HTTP_PORT}:8080"
    healthcheck:
      test: ["CMD-SHELL", "/cockroach/cockroach sql --insecure --host=localhost:${COCKROACH_SQL_PORT} -e 'select 1' >/dev/null 2>&1"]
      interval: 5s
      timeout: 5s
      retries: 60

  roach2:
    image: cockroachdb/cockroach:v24.1.3
    hostname: roach2
    restart: unless-stopped
    command:
      [
        "start",
        "--insecure",
        "--cluster-name=distrib",
        "--listen-addr=0.0.0.0:${COCKROACH_RPC_PORT}",
        "--sql-addr=0.0.0.0:${COCKROACH_SQL_PORT}",
        "--advertise-addr=roach2:${COCKROACH_RPC_PORT}",
        "--advertise-sql-addr=roach2:${COCKROACH_SQL_PORT}",
        "--http-addr=0.0.0.0:8080",
        "--join=roach1:${COCKROACH_RPC_PORT},roach2:${COCKROACH_RPC_PORT},roach3:${COCKROACH_RPC_PORT}"
      ]
    volumes:
      - roach2:/cockroach/cockroach-data
    depends_on:
      roach1:
        condition: service_started
    healthcheck:
      test: ["CMD-SHELL", "/cockroach/cockroach sql --insecure --host=localhost:${COCKROACH_SQL_PORT} -e 'select 1' >/dev/null 2>&1"]
      interval: 5s
      timeout: 5s
      retries: 60

  roach3:
    image: cockroachdb/cockroach:v24.1.3
    hostname: roach3
    restart: unless-stopped
    command:
      [
        "start",
        "--insecure",
        "--cluster-name=distrib",
        "--listen-addr=0.0.0.0:${COCKROACH_RPC_PORT}",
        "--sql-addr=0.0.0.0:${COCKROACH_SQL_PORT}",
        "--advertise-addr=roach3:${COCKROACH_RPC_PORT}",
        "--advertise-sql-addr=roach3:${COCKROACH_SQL_PORT}",
        "--http-addr=0.0.0.0:8080",
        "--join=roach1:${COCKROACH_RPC_PORT},roach2:${COCKROACH_RPC_PORT},roach3:${COCKROACH_RPC_PORT}"
      ]
    volumes:
      - roach3:/cockroach/cockroach-data
    depends_on:
      roach2:
        condition: service_started
    healthcheck:
      test: ["CMD-SHELL", "/cockroach/cockroach sql --insecure --host=localhost:${COCKROACH_SQL_PORT} -e 'select 1' >/dev/null 2>&1"]
      interval: 5s
      timeout: 5s
      retries: 60

  db-bootstrap:
    image: cockroachdb/cockroach:v24.1.3
    depends_on:
      roach1:
        condition: service_healthy
      roach2:
        condition: service_healthy
      roach3:
        condition: service_healthy
    environment:
      - RPC_HOST=roach1
      - RPC_PORT=26257
      - SQL_HOST=roach1
      - SQL_PORT=26258
      - DB_NAME=app
      - SCHEMA_FILE=/schema.sql
    volumes:
      - ./scripts/db-bootstrap.sh:/db-bootstrap.sh:ro
      - ./db/schema.sql:/schema.sql:ro
    entrypoint: ["/bin/sh","-c"]
    command: ["/bin/sh /db-bootstrap.sh"]
    restart: "no"

  api:
    build: .
    command: ["/app/api"]
    restart: unless-stopped
    environment:
      - NATS_URL=nats://nats:4222
      - HTTP_ADDR=:8080
      - STREAM_NAME=JOBS
      - STREAM_SUBJECTS=jobs.*
      - DB_DSN=postgresql://root@roach1:26258/app?sslmode=disable
      - DATABASE_URL=postgresql://root@roach1:26258/app?sslmode=disable
      - DB_URL=postgresql://root@roach1:26258/app?sslmode=disable
      - COCKROACH_URL=postgresql://root@roach1:26258/app?sslmode=disable
      - PGURL=postgresql://root@roach1:26258/app?sslmode=disable
      - PGDATABASE=app
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      db-bootstrap:
        condition: service_completed_successfully
      nats:
        condition: service_started
    ports:
      - "${API_PORT}:8080"

  worker:
    build: .
    command: ["/app/worker"]
    restart: unless-stopped
    environment:
      - NATS_URL=nats://nats:4222
      - STREAM_NAME=JOBS
      - WORKER_TYPE=email
      - CONSUMER_NAME=worker-email
    depends_on:
      nats:
        condition: service_started

  ui:
    build:
      context: ./ui
    restart: unless-stopped
    environment:
      - API_BASE=/api
    depends_on:
      api:
        condition: service_started
    ports:
      - "${UI_PORT}:80"


volumes:
  roach1:
  roach2:
  roach3:
